//
// Copyright 2018 netmuncher Developers
//
// Licensed under the Apache License, Version 2.0, <LICENSE-APACHE or
// http://apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or
// http://opensource.org/licenses/MIT>, at your option. This file may not be
// copied, modified, or distributed except according to those terms.
//

#![allow(unknown_lints)]
#![allow(clippy)]

use parse::component::{PinType, PinNum, UnitPin};
use error::{self, ErrorKind};
use parse::ast::*;
use parse::token::{Tok, validate_symbol};
use parse::source::Locator;

use lalrpop_util::ParseError;

grammar(locator: &Locator);

extern {
    type Location = usize;
    type Error = error::Error;
    enum Tok {
        "{" => Tok::LBrace,
        "}" => Tok::RBrace,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "[" => Tok::LBracket,
        "]" => Tok::RBracket,
        "=" => Tok::Equals,
        ".." => Tok::DotDot,
        "," => Tok::Comma,
        ":" => Tok::Colon,
        ";" => Tok::Semicolon,
        Num => Tok::Num(<u32>),
        Quote => Tok::Quote(<String>),
        Symbol => Tok::Symbol(<String>),
        "abstract" => Tok::KeywordAbstract,
        "bidirectional" => Tok::KeywordBidirectional,
        "component" => Tok::KeywordComponent,
        "footprint" => Tok::KeywordFootprint,
        "global" => Tok::KeywordGlobal,
        "input" => Tok::KeywordInput,
        "net" => Tok::KeywordNet,
        "noconnect" => Tok::KeywordNoConnect,
        "output" => Tok::KeywordOutput,
        "passive" => Tok::KeywordPassive,
        "pin" => Tok::KeywordPin,
        "power_in" => Tok::KeywordPowerIn,
        "power_out" => Tok::KeywordPowerOut,
        "prefix" => Tok::KeywordPrefix,
        "require" => Tok::KeywordRequire,
        "tristate" => Tok::KeywordTristate,
        "unit" => Tok::KeywordUnit,
        "value" => Tok::KeywordValue,
    }
}

SymbolOrQuote: String = {
    <Symbol> => <>,
    <offset:@L> <q:Quote> =>? validate_symbol(locator, offset, q),
};

SymbolList: Vec<String> = {
    <sl:SymbolList> "," <s:SymbolOrQuote> => {
        let mut result = sl;
        result.push(s);
        result
    },
    <s:SymbolOrQuote> "[" <n:Num> "]" => {
        vec![format!("{}{}", s, n)]
    },
    <s:SymbolOrQuote> "[" <start:Num> ":" <finish:Num> "]" => {
        let mut result = Vec::new();
        let range = if start <= finish {
            (start..(finish+1))
        } else {
            (finish..(start+1))
        };
        result.extend(range.map(&|i| format!("{}{}", s, i)));
        result
    },
    SymbolOrQuote => vec![<>],
};

NumRange: Vec<u32> = {
    "(" <start:Num> ".." <end:Num> ")" => {
        let mut result = Vec::new();
        if start <= end {
            result.extend(start..(end+1));
        } else {
            result.extend((end..(start+1)).rev());
        }
        result
    }
};

NumList: Vec<u32> = {
    <l:NumList> "," <n:Num> => {
        let mut result = l;
        result.push(n);
        result
    },
    <l:NumList> "," <nr:NumRange> => {
        let mut result = l;
        result.extend(&nr);
        result
    },
    <NumRange> => <>,
    <Num> => vec![<>],
};

Value: Value = {
    <offset:@L> "value" "=" <val:Quote> ";" => Value::new(locator.tag(offset), val),
};

ConnectionMap: ConnectionMap = {
    <offset:@L> <left:SymbolList> ":" "noconnect" ";" => {
        let result = left.iter().cloned().zip(left.iter().map(|_| "noconnect".into())).collect();
        ConnectionMap::new(locator.tag(offset), result)
    },
    <offset:@L> <left:SymbolList> ":" <right:SymbolList> ";" =>? {
        if right.len() != left.len() && right.len() > 1 {
            return Err(ParseError::User {
                error: ErrorKind::NetmuncherError(
                    format!("{}: expected {} connections on the right, but found {}",
                        locator.locate(offset), left.len(), right.len())).into()
            });
        }

        let result: Vec<(String, String)> = if right.len() == 1 {
            left.iter().cloned().zip(left.iter().map(&|_| right[0].clone())).collect()
        } else {
            left.iter().cloned().zip(right.iter().cloned()).collect()
        };
        Ok(ConnectionMap::new(locator.tag(offset), result))
    }
};

InstanceParam: Ast = {
    <Value> => Ast::Value(<>),
    <ConnectionMap> => Ast::ConnectionMap(<>),
};

InstanceParams: Vec<Ast> = {
    <ips:InstanceParams> <param:InstanceParam> => {
        let mut params = ips;
        params.push(param);
        params
    },
    <InstanceParam> => vec![<>],
};

InstanceDef: InstanceDef = {
    <offset:@L> <name:SymbolOrQuote> "{" <params:InstanceParams> "}" => {
        InstanceDef::new(locator.tag(offset), name, params)
    },
    <offset:@L> <name:SymbolOrQuote> "{" "}" => InstanceDef::new(locator.tag(offset), name, Vec::new()),
    <offset:@L> <name:SymbolOrQuote> ";" => InstanceDef::new(locator.tag(offset), name, Vec::new()),
};

PinType: PinType = {
    "input" => PinType::Input,
    "output" => PinType::Output,
    "passive" => PinType::Passive,
    "power_in" => PinType::PowerIn,
    "power_out" => PinType::PowerOut,
    "tristate" => PinType::Tristate,
    "bidirectional" => PinType::Bidirectional,
    "noconnect" => PinType::NoConnect,
}; 

UnitPin: UnitPin = {
    "pin" <name:Symbol> ":" <pt:PinType> "=" <nl:NumList> ";" => {
        UnitPin::new(name, pt, nl.into_iter().map(|n| PinNum(n)).collect())
    }
};

UnitPinList: Vec<UnitPin> = {
    <upl:UnitPinList> <up:UnitPin> => {
        let mut pins = upl;
        pins.push(up);
        pins
    },
    <UnitPin> => vec![<>],
};

Unit: Unit = {
    <offset:@L> "unit" "{" <pl:UnitPinList> "}" => Unit::new(locator.tag(offset), pl),
    <offset:@L> "unit" "{" "}" => Unit::new(locator.tag(offset), Vec::new()),
};

Footprint: Footprint = {
    <offset:@L> "footprint" "=" <t:Quote> ";" => Footprint::new(locator.tag(offset), t),
};

Prefix: Prefix = {
    <offset:@L> "prefix" "=" <t:Quote> ";" => Prefix::new(locator.tag(offset), t),
};

AbstractPins: Vec<AbstractPin> = {
    <offset:@L> "pin" <names:SymbolList> ":" <pin_type:PinType> ";" => {
        let tag = locator.tag(offset);
        let mut result = Vec::new();
        for name in names {
            result.push(AbstractPin::new(tag, name, pin_type));
        }
        result
    }
};

ConcretePins: Vec<ConcretePin> = {
    <offset:@L> "pin" <names:SymbolList> ":" <pin_type:PinType> "=" <nl:NumList> ";" =>? {
        let tag = locator.tag(offset);

        if names.len() != nl.len() {
            return Err(ParseError::User {
                error: ErrorKind::NetmuncherError(
                    format!("{}: expected {} pin numbers on the right, but found {}",
                        locator.locate(offset), names.len(), nl.len())).into()
            });
        }

        let mut result = Vec::new();
        for (index, name) in names.into_iter().enumerate() {
            result.push(ConcretePin::new(tag, name, pin_type, PinNum(nl[index])));
        }
        Ok(result)
    }
};

Nets: Nets = {
    <offset:@L> "net" <sl:SymbolList> ";" => Nets::new(locator.tag(offset), sl),
};

ComponentParam: Ast = {
    <Footprint> => Ast::Footprint(<>),
    <Prefix> => Ast::Prefix(<>),
    <Value> => Ast::Value(<>),
    <Nets> => Ast::Nets(<>),
    <AbstractPins> => Ast::AbstractPins(<>),
    <ConcretePins> => Ast::ConcretePins(<>),
    <Unit> => Ast::Unit(<>),
    <InstanceDef> => Ast::InstanceDef(<>),
};

ComponentParams: Vec<Ast> = {
    <params:ComponentParams> <param:ComponentParam> => {
        let mut result = params;
        result.push(param);
        result
    },
    <ComponentParam> => vec![<>],
};

ComponentDef: ComponentDef = {
    <offset:@L> "abstract" "component" <name:SymbolOrQuote> "{" <params:ComponentParams> "}" => {
        ComponentDef::new(locator.tag(offset), name, true, params)
    },
    <offset:@L> "abstract" "component" <name:SymbolOrQuote> "{" "}" => {
        ComponentDef::new(locator.tag(offset), name, true, Vec::new())
    },
    <offset:@L> "component" <name:SymbolOrQuote> "{" <params:ComponentParams> "}" => {
        ComponentDef::new(locator.tag(offset), name, false, params)
    },
    <offset:@L> "component" <name:SymbolOrQuote> "{" "}" => {
        ComponentDef::new(locator.tag(offset), name, false, Vec::new())
    },
};

Require: Require = {
    <offset:@L> "require" <module:Quote> ";" => Require::new(locator.tag(offset), module),
};

Ast: Ast = {
    <Require> => Ast::Require(<>),
    "global" <Nets> => Ast::Nets(<>),
    <ComponentDef> => Ast::ComponentDef(<>),
};

pub Source: Vec<Ast> = {
    <s:Source> <ast:Ast> => {
        let mut result = s;
        result.push(ast);
        result
    },
    <Ast> => vec![<>],
};